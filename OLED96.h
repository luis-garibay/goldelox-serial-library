/*
 *	All of the serial commands come from the GOLDELOX serial command manual available at:
 *		http://www.4dsystems.com.au/productpages/GOLDELOX/downloads/GOLDELOX_serialcmdmanual_R_1_7.pdf
 *	Most descriptions are provided by 4d Systems in the above documentation.
 */

#ifndef _OLED96_H_
#define _OLED96_H_

#if ARDUINO >= 100
 #include "Arduino.h"
#else
 #include "WProgram.h"
#endif

uint8_t getResponse() {
	while (!Serial.available()) delay(1);
	return Serial.read();
}
/*
 *	Function: Get Response
 *	Description: Check for serial response from the
 *		GOLDELOX GPU.
 *	Returns: Byte signifying whether or not there was
 *		a mismatch between the command and the
 *		response.
 */

/****************************
 *	Text / String Functions	*
 ****************************/

uint8_t moveCursor(uint16_t row, uint16_t col);
/*
Function: Move Cursor
Description:
The Move Cursor command moves the text cursor to a screen position set by line and
column parameters. The line and column position is calculated, based on the size and
scaling factor for the currently selected font. When text is outputted to screen it will
be displayed from this position. The text position could also be set with “Move
Origin” command if required to set the text position to an exact pixel location. Note
that lines and columns start from 0, so line 0, column 0 is the top left corner of the
display.
 */

uint8_t putChar(uint16_t c);
/*
Function: Put Character
Description:
The Put Character command prints a single character to the display.
 */

uint8_t putStr(char *str);
/*
 *	Function: Put String
 *	Description:
The Put String command prints a string to the display and returns the pointer to the
string. A string needs to be terminated with a NULL character. There is a maximum of
255 characters per string.
 */

uint16_t getCharW(char c);
/*
 *	Function: Character Width
 *	Description:
The Character Width command is used to calculate the width in pixel units for a
character, based on the currently selected font. The font can be proportional or
mono-spaced. If the total width of the character exceeds 255 pixel units, the function
will return the 'wrapped' (modulo 8) value.
 */

uint16_t getCharH(char c);
/*
 *	Function: Character Height
 *	Description:
The Character Height command is used to calculate the height in pixel units for a
character, based on the currently selected font. The font can be proportional or
mono-spaced. If the total height of the character exceeds 255 pixel units, the
function will return the 'wrapped' (modulo 8) value.
 */

uint8_t setTextFG(uint16_t color);
/*
 *	Function: Text Foreground Colour
 *	Description:
The Text Foreground Colour command sets the text foreground colour.
 */

uint8_t setTextBG(uint16_t color);
/*
 *	Function: Text Background Colour
 *	Description:
The Text Background Colour command sets the text background colour.
 */

uint8_t setFont(uint8_t f);
/*
 *	Function: Set Font
 *	Parameter: 0 (System Fonts) or 7 (Media Fonts)
 *	Description:
The Set Font command sets the required font using its ID.
To set the external fonts (media fonts), “Set Sector Address” should be used to set
the sector address of the font data saved on the uSD card. The Sector address could
be found from the include file generated by the 4D Workshop4 IDE when a string
object is dropped on to the screen and the file is compiled to write the Fonts data to
the uSD card. Check the 4D-AN-G5001 (Application Note) for further details.
 */

uint8_t setTextWM(uint8_t m);
/*
 *	Function: Text Width Multiplier
 *	Description:
The Text Width command sets the text width multiplier between 1 and 16.
 */

uint8_t setTextHM(uint8_t m);
/*
 *	Function: Text Height Multiplier
 *	Description:
The Text Height command sets the text height multiplier between 1 and 16.
 */

uint8_t setTextXGap(uint8_t g);
/*
 *	Function: Text X-gap
 *	Description:
The Text X-gap command sets the pixel gap between characters (x-axis), where the
gap is in pixel units.
 */

uint8_t setTextYGap(uint8_t g);
/*
 *	Function: Text Y-gap
 *	Description:
The Text Y-gap command sets the pixel gap between characters (y-axis), where the
gap is in pixel units.
 */

uint8_t setBold(uint8_t m);
/*
 *	Function: Text Bold
 *	Description:
The Text Bold command sets the Bold attribute for the text.
The ‘Text Bold’ attribute is cleared internally once the text (character or string) is
displayed.
 */

uint8_t setInverse(uint8_t m);
/*
 *	Function: Text Inverse
 *	Description:
The Text Inverse command inverts the text Foreground and Background colour.
The ‘Text Inverse’ attribute is cleared internally once the text (character or string) is
displayed.
 */

uint8_t setItalic(uint8_t m);
/*
 *	Function: Text Italic
 *	Description:
The Text Italic command sets the text to italic.
The ‘Text Italic’ attribute is cleared internally once the text (character or string) is
displayed.
 */

uint8_t setOpacity(uint8_t m);
/*
 *	Function: Text Opacity
 *	Description:
The Text Opacity command selects whether or not the 'background' pixels are drawn.
(Default mode is OPAQUE with BLACK background.)
 */

uint8_t setUnderline(uint8_t m);
/*
 *	Function: Text Underline
 *	Description:
The Text Underline command sets the text to underlined.
The ‘Text Underline’ attribute is cleared internally once the text (character or string)
is displayed.
 */

uint8_t setTextAttrib(uint8_t v);
/*
 *	Function: Text Attributes
 *	Description: Can set Text Attributes with certain bits.
 *		0001 0000 - Bold
 *		0010 0000 - Italic
 *		0100 0000 - Inverse
 *		1000 0000 - Underline
 *		Can combine attributes w/ bitwise or operation.
 *
 *		Ex: setTextAttrib(0x10 | 0x20 | 0x80); sets attributes to bold, italics, and underlined
 *			OR
 *			setTextAttrib(0xB0); does the same
 */

/************************
 *	Graphics Functions	*
 ************************/

uint8_t clearScreen();
/*
 *	Function: Clear Screen
 *	Description: Clears the screen using the current background color.
 *		Brings the following settings back to default,
 *			- Outline color set to BLACK
 *			- Pen set to OUTLINE
 *			- Text magnification set to 1
 *			- All origins set to 0:0
 */

uint8_t chColor(uint16_t oldCol, uint16_t newCol);
/*
 *	Function: Change Color
 *	Description:
The Change Colour command changes all oldColour pixels to newColour within the
clipping window area.
 */

uint8_t drawCircle(uint16_t x, uint16_t y, uint16_t r, uint16_t color);
/*
 *	Function: Draw Circle
 *	Description:
The Draw Circle command draws a circle with centre point x, y with radius r using the
specified colour.
 */

uint8_t fillCircle(uint16_t x, uint16_t y, uint16_t r, uint16_t color);
/*
 *	Function: Draw Filled Circle
 *	Description:
The Draw Circle command draws a solid circle with centre point x1, y1 with radius
using the specified colour.
The outline colour can be specified with the “Outline Colour” command.
If “Outline Colour” is set to 0, no outline is drawn.
 */

uint8_t drawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
/*
 *	Function: Draw Line
 *	Description:
The Draw Line command draws a line from x1,y1 to x2,y2 using the specified colour.
The line is drawn using the current object colour. The current origin is not altered.
The line may be tessellated with the “Line Pattern” command.
 */

uint8_t drawRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color);
/*
 *	Function: Draw Rectangle
 *	Description:
The Draw Rectangle command draws a rectangle from x1, y1 to x2, y2 using the
specified colour. The line may be tessellated with the “Line Pattern” command.
 */

uint8_t fillRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color);
/*
 *	Function: Draw Filled Rectangle
 *	Description:
The Draw Filled Rectangle command draws a solid rectangle from x1, y1 to x2, y2
using the specified colour. The line may be tessellated with the “Line Pattern”
command.
The outline colour can be specified with the “Outline Colour” command. If “Outline
Colour” is set to 0, no outline is drawn.
 */

uint8_t drawPolyline(uint32_t n, uint16_t* xCoords, uint16_t* yCoords, uint16_t color);
/*
 *	Function: Draw Polyline
 *	Description:
The Draw Polyline command plots lines between points specified by a pair of arrays
using the specified colour. The lines may be tessellated with the “Line Pattern”
command. The “Draw Polyline” command can be used to create complex raster
graphics by loading the arrays from serial input or from MEDIA with very little code
requirement.
 */

uint8_t drawPolygon(uint32_t n, uint16_t* xCoords, uint16_t* yCoords, uint16_t color);
/*
 *	Function: Draw Polygon
 *	Details:
The Draw Polygon command plots lines between points specified by a pair of arrays
using the specified colour. The last point is drawn back to the first point, completing
the polygon. The lines may be tessellated with “Line Pattern” command. The Draw
Polygon command can be used to create complex raster graphics by loading the
arrays from serial input or from MEDIA with very little code requirement.
 */

uint8_t drawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color);
/*
 *	Function: Draw Triangle
 *	Details:
The Draw Triangle command draws a triangle outline between vertices x1,y1 , x2,y2
and x3,y3 using the specified colour. The line may be tessellated with the “Line
Pattern” command.
 */

uint32_t calculateOrbit(uint16_t angle, uint16_t distance);
/*
 *	Function: Calculate Orbit
 *	Details:
The Calculate Orbit command calculates the x, y coordinates of a distant point
relative to the current origin, where the only known parameters are the angle and
the distance from the current origin.
 */

uint8_t putPixel(uint16_t x, uint16_t y, uint16_t color);
/*
 *	Function: Put Pixel
 *	Details:
The Put Pixel command draws a pixel at position x, y using the specified colour.
 */

uint16_t readPixel(uint16_t x, uint16_t y);
/*
 *	Function: Read Pixel
 *	Description:
The Read Pixel command reads the colour value of the pixel at position x,y.
 */

uint8_t moveOrigin(uint16_t x, uint16_t y);
/*
 *	Function: Move Origin
 *	Description:
The Move Origin command moves the origin to a new position.
 */

uint8_t setBG(uint16_t c);
/*
 *	Function: Background Color
 *	Description:
The Background Colour command sets the screen background colour.
 */

uint8_t setOutlineColor(uint16_t color);
/*
 *	Function: Outline Color
 *	Description:
The Outline Colour command sets the outline colour for rectangles and circles.
 */

uint8_t setContrast(uint8_t lvl);
/*
 *	Function: Set Contrast
 *	Description: Set the display's contrast.
 *					Level 0 turns the screen off.
 *					Levels 1-15 are different contrasts.
 *					Any number that is not in the range 1-15 will return 0.
 */

uint16_t setFrameDelay(uint16_t ms);
/*
 *	Function: Frame Delay
 *	Description:
The Frame Delay command sets the inter frame delay for the “Media Video”
command.
 */

uint8_t setLinePattern(uint16_t pattern);
/*
 *	Function: Line Pattern
 *	Description:
The Line Pattern command sets the line draw pattern for line drawing. If set to zero,
lines are solid, else each '1' bit represents a pixel that is turned off.
 */

uint8_t setScreenMode(uint8_t mode);
/*
 *	Function: Screen Mode
 *	Description:
The Screen Mode command alters the graphics orientation LANDSCAPE,
LANDSCAPE_R, PORTRAIT, PORTRAIT_R.
 */

uint8_t setGraphicsParams(uint16_t function, uint16_t val);
/*
 *	Function: Set Graphics Parameters
 *	Description:
Sets various parameters for the Graphics Commands.
 */

uint8_t turnOffScreenSaver();
/*
 *	Function: Turn Off Screensaver
 *	Description:
Prevents the default scrolling screensaver from coming on.
 */
